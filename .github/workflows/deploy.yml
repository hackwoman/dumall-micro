name: Deploy Dumall Microservices

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Common Module
      run: |
        cd dumall-common
        mvn clean install -DskipTests
    
    - name: Build Microservices
      run: |
        for service in user-service product-service payment-service inventory-service; do
          cd $service
          mvn clean package -DskipTests
          cd ..
        done
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run Tests
      run: |
        # 运行后端测试
        for service in user-service product-service payment-service inventory-service; do
          cd $service
          mvn test
          cd ..
        done
        
        # 运行前端测试
        cd frontend
        npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push User Service
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-user-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Product Service
      uses: docker/build-push-action@v5
      with:
        context: ./product-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-product-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Payment Service
      uses: docker/build-push-action@v5
      with:
        context: ./payment-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-payment-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Inventory Service
      uses: docker/build-push-action@v5
      with:
        context: ./inventory-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-inventory-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # 这里可以添加部署到测试环境的命令
        # 例如：kubectl apply -f k8s/staging/
    
    - name: Run Integration Tests
      run: |
        echo "Running integration tests..."
        # 这里可以添加集成测试命令

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # 这里可以添加部署到生产环境的命令
        # 例如：kubectl apply -f k8s/production/
    
    - name: Health Check
      run: |
        echo "Performing health checks..."
        # 这里可以添加健康检查命令 