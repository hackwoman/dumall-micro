version: '3.8'

services:
  # Nginx API Gateway
  nginx-gateway:
    image: nginx:alpine
    container_name: dumall-nginx-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-gateway.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - user-service
      - product-service
      - payment-service
      - inventory-service
    networks:
      - dumall-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: dumall-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:userdb
      - SERVER_PORT=8081
    networks:
      - dumall-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: dumall-product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:productdb
      - SERVER_PORT=8082
    networks:
      - dumall-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: dumall-payment-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:paymentdb
      - SERVER_PORT=8083
    networks:
      - dumall-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: dumall-inventory-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:inventorydb
      - SERVER_PORT=8084
    networks:
      - dumall-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dumall-frontend
    ports:
      - "5174:5174"
    environment:
      - VITE_API_BASE_URL=http://localhost
    networks:
      - dumall-network
    restart: unless-stopped
    depends_on:
      - nginx-gateway

  # Redis Cache (Optional)
  redis:
    image: redis:alpine
    container_name: dumall-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dumall-network
    restart: unless-stopped

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: dumall-postgres
    environment:
      POSTGRES_DB: dumall
      POSTGRES_USER: dumall_user
      POSTGRES_PASSWORD: dumall_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dumall-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dumall-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - dumall-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dumall-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - dumall-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:


networks:
  dumall-network:
    driver: bridge
